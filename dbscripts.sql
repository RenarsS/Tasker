create table ROLES
(
    ROLE_ID     NUMBER generated as identity
        constraint ROLES_PK
            primary key,
    NAME        NVARCHAR2(50) not null,
    DESCRIPTION NVARCHAR2(400)
)
/

comment on column ROLES.ROLE_ID is 'Role identifier'
/

comment on column ROLES.NAME is 'Name of the role'
/

comment on column ROLES.DESCRIPTION is 'Description of the role'
/

create table USERS
(
    USER_ID       NUMBER default "TASKMASTER"."ISEQ$$_75754".nextval generated as identity
		constraint USERS_PK
			primary key,
    USERNAME      NVARCHAR2(50)          not null,
    EMAIL         NVARCHAR2(100)         not null,
    PASSWORD_HASH NVARCHAR2(255)         not null,
    SALT          NVARCHAR2(40)          not null,
    ROLE          NUMBER                 not null
        constraint USERS_ROLES_ROLE_ID_FK
            references ROLES,
    CREATED_AT    DATE   default SYSDATE not null,
    UPDATED_AT    DATE   default SYSDATE not null,
    STATUS        NUMBER default 0       not null
)
/

comment on table USERS is 'Holds all users used for authentication and business logic.'
/

comment on column USERS.USER_ID is 'Identifier of the users'
/

comment on column USERS.USERNAME is 'Username of the user given by administrator.'
/

comment on column USERS.EMAIL is 'Email address of the user.'
/

comment on column USERS.PASSWORD_HASH is 'Hashed password of the user.'
/

comment on column USERS.SALT is 'String of characters used for password salting.'
/

comment on column USERS.ROLE is 'Role of the user.'
/

comment on column USERS.CREATED_AT is 'Date when user was created.'
/

comment on column USERS.UPDATED_AT is 'Date of the last update of the user.'
/

comment on column USERS.STATUS is 'Status of the user. 1 - Active / 0  - Disabled.'
/

create unique index USERS_USERNAME_UINDEX
    on USERS (USERNAME)
/

alter table USERS
    add constraint USERS_PK_2
        unique (USERNAME)
/

create table TASK_TYPES
(
    TASK_TYPE_ID NUMBER generated as identity
        constraint TASK_TYPES_PK
            primary key,
    NAME         NVARCHAR2(50) not null,
    DESCRIPTION  NVARCHAR2(400)
)
/

comment on table TASK_TYPES is 'Holds information about available task types.'
/

comment on column TASK_TYPES.TASK_TYPE_ID is 'Identifier of the task type.'
/

comment on column TASK_TYPES.NAME is 'Name of the task type.'
/

comment on column TASK_TYPES.DESCRIPTION is 'Description of the task type.'
/

create table STATUS
(
    STATUS_ID   NUMBER generated as identity
        constraint STATUS_PK
            primary key,
    NAME        NVARCHAR2(20) not null,
    DESCRIPTION NVARCHAR2(400)
)
/

comment on table STATUS is 'Holds all types of status of the tasks.'
/

comment on column STATUS.STATUS_ID is 'Identifier of the status.'
/

comment on column STATUS.NAME is 'Title of the status.'
/

comment on column STATUS.DESCRIPTION is 'Description of the status'
/

create table TASKS
(
    TASK_ID     NUMBER default "TASKMASTER"."ISEQ$$_75771".nextval generated by default on null as identity
		constraint TASKS_PK
			primary key,
    TASK_TYPE   NUMBER                 not null
        constraint TASKS_TASK_TYPES_TASK_TYPE_ID_FK
            references TASK_TYPES,
    TITLE       NVARCHAR2(255)         not null,
    DESCRIPTION NVARCHAR2(1000)        not null,
    STATUS      NUMBER                 not null
        constraint TASKS_STATUS_STATUS_ID_FK
            references STATUS,
    CREATED_BY  NUMBER                 not null
        constraint TASKS_USERS_USER_ID_FK
            references USERS,
    CREATED_AT  DATE   default SYSDATE not null,
    UPDATED_AT  DATE   default SYSDATE not null,
    DUE         DATE                   not null,
    VECTOR_ID   NVARCHAR2(200)
)
/

comment on table TASKS is 'Holds information of the tasks.'
/

comment on column TASKS.TASK_ID is 'Identifier of the task.'
/

comment on column TASKS.TASK_TYPE is 'Type of the task'
/

comment on column TASKS.TITLE is 'Short summary of the task.'
/

comment on column TASKS.DESCRIPTION is 'Instructions of the task.'
/

comment on column TASKS.STATUS is 'Status of the task.'
/

comment on column TASKS.CREATED_BY is 'Creator of the task.'
/

comment on column TASKS.CREATED_AT is 'Date of creation.'
/

comment on column TASKS.UPDATED_AT is 'Last update date. Triggered by comment addition.'
/

comment on column TASKS.DUE is 'd'
/

create trigger INSERT_TASK_TRG
    before insert
    on TASKS
    for each row
BEGIN

        SELECT ISEQ$$_75771.NEXTVAL
        INTO :new.TASK_ID
        FROM DUAL;

    END;
/

create table ASSIGNMENTS
(
    ASSIGNMENT_ID NUMBER default "TASKMASTER"."ISEQ$$_75777".nextval generated by default on null as identity
		constraint ASSIGNMENTS_PK
			primary key,
    TASK_ID       NUMBER
        constraint ASSIGNMENTS_TASKS_TASK_ID_FK
            references TASKS,
    USER_ID       NUMBER                 not null
        constraint ASSIGNMENTS_USERS_USER_ID_FK
            references USERS,
    CREATED_AT    DATE   default SYSDATE not null,
    UPDATED_AT    DATE   default SYSDATE not null,
    STATUS        NUMBER                 not null,
    VECTOR_ID     NVARCHAR2(200)
)
/

comment on table ASSIGNMENTS is 'Used for linking users and tasks.'
/

comment on column ASSIGNMENTS.ASSIGNMENT_ID is 'Identifier of the assignment.'
/

comment on column ASSIGNMENTS.TASK_ID is 'Task assigned to the user. '
/

comment on column ASSIGNMENTS.USER_ID is 'User assigned to the task.'
/

comment on column ASSIGNMENTS.CREATED_AT is 'Date of the initial user assignment.'
/

comment on column ASSIGNMENTS.UPDATED_AT is 'Assignment record update date.'
/

comment on column ASSIGNMENTS.STATUS is 'Stratus of the assignment.'
/

create trigger INSERT_ASSIGNMENT_TRG
    before insert
    on ASSIGNMENTS
    for each row
BEGIN

        SELECT ISEQ$$_75777.NEXTVAL
        INTO :new.ASSIGNMENT_ID
        FROM DUAL;

    END;
/

create table COMMENTS
(
    COMMENT_ID NUMBER default "TASKMASTER"."ISEQ$$_75780".nextval generated by default on null as identity
		constraint COMMENTS_PK
			primary key,
    TASK_ID    NUMBER                 not null
        constraint COMMENTS_TASKS_TASK_ID_FK
            references TASKS,
    USER_ID    NUMBER
        constraint COMMENTS_USERS_USER_ID_FK
            references USERS,
    CONTENT    NVARCHAR2(400)         not null,
    CREATED_AT DATE   default SYSDATE not null,
    VECTOR_ID  NVARCHAR2(200)
)
/

comment on table COMMENTS is 'Holds additional information related to the task.'
/

comment on column COMMENTS.COMMENT_ID is 'Identifier of the comment.'
/

comment on column COMMENTS.TASK_ID is 'Task to which comment was added.'
/

comment on column COMMENTS.USER_ID is 'Comment creator.'
/

comment on column COMMENTS.CONTENT is 'Content of the actual comment.'
/

comment on column COMMENTS.CREATED_AT is 'Comment creation time.'
/

create trigger INSERT_COMMENT_TRG
    before insert
    on COMMENTS
    for each row
BEGIN

        SELECT ISEQ$$_75780.NEXTVAL
        INTO :new.COMMENT_ID
        FROM DUAL;

    END;
/

create table TIME_REPORTS
(
    TIME_REPORT_ID NUMBER default "TASKMASTER"."ISEQ$$_75783".nextval generated as identity
		constraint TIME_REPORTS_PK
			primary key,
    TASK_ID        NUMBER
        constraint TIME_REPORTS_TASKS_TASK_ID_FK
            references TASKS,
    USER_ID        NUMBER
        constraint TIME_REPORTS_USERS_USER_ID_FK
            references USERS,
    BEGINNING      DATE                   not null,
    END            DATE,
    TIME_SPENT     DATE,
    REPORT_DATE    DATE   default SYSDATE not null
)
/

comment on table TIME_REPORTS is 'Holds information about time spent on tasks. '
/

comment on column TIME_REPORTS.TIME_REPORT_ID is 'Identifier of the time report.'
/

comment on column TIME_REPORTS.TASK_ID is 'Task to which time is being reported.'
/

comment on column TIME_REPORTS.USER_ID is 'User on behalf of which time is being reported to the task.'
/

comment on column TIME_REPORTS.BEGINNING is 'Time when task fulfilling was started.'
/

comment on column TIME_REPORTS.END is 'Time which task was finished.'
/

comment on column TIME_REPORTS.TIME_SPENT is 'Time spent on a task.'
/

comment on column TIME_REPORTS.REPORT_DATE is 'Date when report was submitted.'
/

create table AUDIT_LOG
(
    LOG_ID  NUMBER       default "TASKMASTER"."ISEQ$$_75786".nextval generated as identity
		constraint AUDIT_LOG_PK
			primary key,
    USER_ID NUMBER
        constraint AUDIT_LOG_USERS_USER_ID_FK
            references USERS,
    ACTION  VARCHAR2(300)                not null,
    TIME    TIMESTAMP(6) default SYSDATE not null,
    DETAILS VARCHAR2(500)
)
/

comment on table AUDIT_LOG is 'Holds information about all actions done by users.'
/

comment on column AUDIT_LOG.LOG_ID is 'Identifier of the log.'
/

comment on column AUDIT_LOG.USER_ID is 'User which did the action.'
/

comment on column AUDIT_LOG.ACTION is 'Description of the action.'
/

comment on column AUDIT_LOG.TIME is 'Time of the action.'
/

comment on column AUDIT_LOG.DETAILS is 'Additional information about done action.'
/

create PACKAGE            tasks_core AS
    TYPE r_c_tasks IS REF CURSOR;

    PROCEDURE get_tasks(c_tasks OUT r_c_tasks);
    PROCEDURE get_task_by_id(i_task_id IN taskmaster.tasks.task_id%TYPE, c_task OUT r_c_tasks);
    PROCEDURE insert_task(
        i_task_type IN taskmaster.tasks.task_type%TYPE,
        i_title IN taskmaster.tasks.title%TYPE,
        i_description IN taskmaster.tasks.description%TYPE,
        i_status IN taskmaster.tasks.status%TYPE,
        i_created_by IN taskmaster.tasks.created_by%TYPE,
        i_due IN taskmaster.tasks.due%TYPE,
        o_new_task_id OUT taskmaster.tasks.task_id%TYPE);

    PROCEDURE update_task(
        i_task_id IN taskmaster.tasks.task_id%TYPE,
        i_task_type IN taskmaster.tasks.task_type%TYPE,
        i_title IN taskmaster.tasks.title%TYPE,
        i_description IN taskmaster.tasks.description%TYPE,
        i_status IN taskmaster.tasks.status%TYPE,
        i_due IN taskmaster.tasks.due%TYPE,
        c_updated_task OUT r_c_tasks);

    PROCEDURE delete_task(i_task_id IN taskmaster.tasks.task_id%TYPE);
        
    PROCEDURE link_to_vector(
        i_task_id IN taskmaster.tasks.task_id%TYPE,
        i_vector_id IN taskmaster.tasks.vector_id%TYPE);

    PROCEDURE get_task_by_vector_id(i_vector_id IN taskmaster.tasks.vector_id%TYPE, c_task OUT r_c_tasks);

END tasks_core;
/

create PACKAGE BODY tasks_core AS

    PROCEDURE get_tasks (c_tasks OUT r_c_tasks)
    IS
    BEGIN
        OPEN c_tasks FOR
        SELECT
            t.task_id AS TaskId,
            t.task_type AS TaskType,
            t.title AS Title,
            t.description AS Description,
            t.status AS Status,
            t.created_by AS CreatedBy,
            t.created_at AS CreatedAt,
            t.updated_at AS UpdatedAt,
            t.vector_id AS VectorId,
            t.due AS Due
        FROM
            taskmaster.tasks t;
    END get_tasks;

    PROCEDURE get_task_by_id(i_task_id IN taskmaster.tasks.task_id%TYPE,
                             c_task OUT r_c_tasks)
        IS
        BEGIN
            OPEN c_task FOR
            SELECT
                t.task_id AS TaskId,
                t.task_type AS TaskType,
                t.title AS Title,
                t.description AS Description,
                t.status AS Status,
                t.created_by AS CreatedBy,
                t.created_at AS CreatedAt,
                t.updated_at AS UpdatedAt,
                t.vector_id AS VectorId,
                t.due AS Due
            FROM
                taskmaster.tasks t
            WHERE
                t.task_id = i_task_id
            FETCH FIRST ROW ONLY;
        END get_task_by_id;

    PROCEDURE insert_task(
        i_task_type IN taskmaster.tasks.task_type%TYPE,
        i_title IN taskmaster.tasks.title%TYPE,
        i_description IN taskmaster.tasks.description%TYPE,
        i_status IN taskmaster.tasks.status%TYPE,
        i_created_by IN taskmaster.tasks.created_by%TYPE,
        i_due IN taskmaster.tasks.due%TYPE,
        o_new_task_id OUT taskmaster.tasks.task_id%TYPE
    )
        IS
        BEGIN

            INSERT INTO taskmaster.tasks(
                task_type,
                title,
                description,
                status,
                created_by,
                created_at,
                updated_at,
                due
            ) VALUES (
                i_task_type,
                i_title,
                i_description,
                i_status,
                i_created_by,
                SYSDATE,
                SYSDATE,
                i_due
            )
            RETURNING task_id INTO o_new_task_id;

        END insert_task;

    PROCEDURE update_task(
        i_task_id IN taskmaster.tasks.task_id%TYPE,
        i_task_type IN taskmaster.tasks.task_type%TYPE,
        i_title IN taskmaster.tasks.title%TYPE,
        i_description IN taskmaster.tasks.description%TYPE,
        i_status IN taskmaster.tasks.status%TYPE,
        i_due IN taskmaster.tasks.due%TYPE,
        c_updated_task OUT r_c_tasks)
        IS
        BEGIN

            UPDATE taskmaster.tasks
            SET
                task_type = i_task_type,
                title = i_title,
                description = i_description,
                status = i_status,
                updated_at = SYSDATE,
                due = i_due
            WHERE
                task_id = i_task_id;

            get_task_by_id(i_task_id, c_updated_task);
        END update_task;

    PROCEDURE delete_task(i_task_id IN taskmaster.tasks.task_id%TYPE)
    IS
    BEGIN
        DELETE FROM taskmaster.tasks WHERE task_id = i_task_id;
    END delete_task;
        
    PROCEDURE link_to_vector(
        i_task_id IN taskmaster.tasks.task_id%TYPE,
        i_vector_id IN taskmaster.tasks.vector_id%TYPE)
    IS
    BEGIN
        UPDATE taskmaster.TASKS
        SET vector_id = i_vector_id
        WHERE task_id = i_task_id;
    END;

    PROCEDURE get_task_by_vector_id(i_vector_id IN taskmaster.tasks.vector_id%TYPE, c_task OUT r_c_tasks)
        IS
        BEGIN
            OPEN c_task FOR
            SELECT
                t.task_id AS TaskId,
                t.task_type AS TaskType,
                t.title AS Title,
                t.description AS Description,
                t.status AS Status,
                t.created_by AS CreatedBy,
                t.created_at AS CreatedAt,
                t.updated_at AS UpdatedAt,
                t.vector_id AS VectorId,
                t.due AS Due
            FROM
                taskmaster.tasks t
            WHERE
                TRIM(t.vector_id) LIKE TRIM(i_vector_id)
            FETCH FIRST ROW ONLY;
        END;


END tasks_core;
/

create PACKAGE            comments_core AS
    TYPE r_c_comments IS REF CURSOR;

    PROCEDURE get_comments(c_comments OUT r_c_comments);
    PROCEDURE get_comment_by_id(i_comment_id taskmaster.comments.comment_id%TYPE, c_comment OUT r_c_comments);
    PROCEDURE get_comments_by_task_id(i_task_id taskmaster.comments.task_id%TYPE, c_comments OUT r_c_comments);
    PROCEDURE insert_comment(
        i_task_id IN taskmaster.comments.task_id%TYPE,
        i_user_id IN taskmaster.comments.user_id%TYPE,
        i_content IN taskmaster.comments.content%TYPE,
        c_inserted_comment OUT r_c_comments);

    PROCEDURE update_comment(
        i_comment_id IN taskmaster.comments.comment_id%TYPE,
        i_content IN taskmaster.comments.content%TYPE,
        c_updated_comment OUT r_c_comments);

    PROCEDURE delete_comment(i_comment_id IN taskmaster.comments.comment_id%TYPE);

    PROCEDURE link_to_vector(
        i_comment_id IN taskmaster.comments.comment_id%TYPE,
        i_vector_id IN taskmaster.comments.vector_id%TYPE);

END comments_core;
/

create PACKAGE BODY            comments_core AS

    PROCEDURE get_comments(c_comments OUT r_c_comments)
        IS
        BEGIN
            OPEN c_comments FOR
            SELECT
                c.comment_id AS CommentId,
                c.task_id AS "Task",
                c.user_id AS "User",
                c.content AS Content,
                c.created_at AS CreatedAt
            FROM
                taskmaster.comments c;
        END;

    PROCEDURE get_comment_by_id(i_comment_id taskmaster.comments.comment_id%TYPE, c_comment OUT r_c_comments)
        IS
        BEGIN
            OPEN c_comment FOR
            SELECT
                c.comment_id AS CommentId,
                c.task_id AS "Task",
                c.user_id AS "User",
                c.content AS Content,
                c.created_at AS CreatedAt
            FROM
                taskmaster.comments c
            WHERE
                c.comment_id = i_comment_id
            FETCH FIRST ROW ONLY;
        END;

    PROCEDURE get_comments_by_task_id(i_task_id taskmaster.comments.task_id%TYPE, c_comments OUT r_c_comments)
        IS
        BEGIN
            OPEN c_comments FOR
            SELECT
                c.comment_id AS CommentId,
                c.task_id AS "Task",
                c.user_id AS "User",
                c.content AS Content,
                c.created_at AS CreatedAt
            FROM
                taskmaster.comments c
            WHERE
                c.task_id = i_task_id;
        END;

    PROCEDURE insert_comment(
        i_task_id IN taskmaster.comments.task_id%TYPE,
        i_user_id IN taskmaster.comments.user_id%TYPE,
        i_content IN taskmaster.comments.content%TYPE,
        c_inserted_comment OUT r_c_comments)
        IS
            v_new_comment_id taskmaster.comments.comment_id%TYPE;
        BEGIN
            INSERT INTO comments(
                task_id,
                user_id,
                content,
                created_at
            ) VALUES (
                i_task_id,
                i_user_id,
                i_content,
                SYSDATE
            )
            RETURNING comment_id INTO v_new_comment_id;

            get_comment_by_id(v_new_comment_id, c_inserted_comment);
        END;

    PROCEDURE update_comment(
        i_comment_id IN taskmaster.comments.comment_id%TYPE,
        i_content IN taskmaster.comments.content%TYPE,
        c_updated_comment OUT r_c_comments)
        IS
        BEGIN
            UPDATE taskmaster.COMMENTS
            SET
                content = i_content
            WHERE
                comment_id = i_comment_id;

            get_comment_by_id(i_comment_id, c_updated_comment);
        END;

    PROCEDURE delete_comment(i_comment_id IN taskmaster.comments.comment_id%TYPE)
        IS
        BEGIN
            DELETE FROM comments WHERE comment_id = i_comment_id;
        END;

    PROCEDURE link_to_vector(
        i_comment_id IN taskmaster.comments.comment_id%TYPE,
        i_vector_id IN taskmaster.comments.vector_id%TYPE)
        IS
        BEGIN
            UPDATE taskmaster.comments
            SET vector_id = i_vector_id
            WHERE comment_id = i_comment_id;
        END;

END comments_core;
/

create PACKAGE            assignments_core AS
    TYPE r_c_assignments IS REF CURSOR;

    PROCEDURE get_assignments(c_assignments OUT r_c_assignments);
    PROCEDURE get_assignment_by_id(i_assignment_id IN taskmaster.assignments.assignment_id%TYPE, c_assignment OUT r_c_assignments);
    PROCEDURE get_assignments_by_task_id(i_task_id IN taskmaster.assignments.task_id%TYPE, c_assignments OUT r_c_assignments);
    PROCEDURE get_assignments_by_user_id(i_user_id IN taskmaster.assignments.user_id%TYPE, c_assignments OUT r_c_assignments);
    PROCEDURE insert_assignment(
        i_task_id IN taskmaster.assignments.task_id%TYPE,
        i_user_id IN taskmaster.assignments.user_id%TYPE,
        i_status_id IN taskmaster.assignments.task_id%TYPE,
        c_inserted_assignment OUT r_c_assignments
    );

    PROCEDURE update_assignment(
        i_assignment_id IN taskmaster.assignments.assignment_id%TYPE,
        i_task_id IN taskmaster.assignments.task_id%TYPE,
        i_user_id IN taskmaster.assignments.user_id%TYPE,
        i_status_id IN taskmaster.assignments.task_id%TYPE,
        c_updated_assignment OUT r_c_assignments);

    PROCEDURE link_to_vector(
        i_assignment_id IN taskmaster.assignments.assignment_id%TYPE,
        i_vector_id IN taskmaster.assignments.vector_id%TYPE);

    PROCEDURE get_assignment_by_vector_id(i_vector_id IN taskmaster.assignments.vector_id%TYPE, c_assignment OUT r_c_assignments);

END assignments_core;
/

create PACKAGE BODY         assignments_core AS

    PROCEDURE get_assignments(c_assignments OUT r_c_assignments)
        IS
        BEGIN
            OPEN c_assignments FOR
            SELECT
                a.assignment_id AS "AssignmentId",
                a.task_id AS "Task",
                a.user_id AS "User",
                a.updated_at AS UpdatedAt,
                a.vector_id AS "VectorId",
                a.status
            FROM
                assignments a;
        END;

    PROCEDURE get_assignment_by_id(i_assignment_id IN taskmaster.assignments.assignment_id%TYPE,
                                   c_assignment OUT r_c_assignments)
        IS
        BEGIN
            OPEN c_assignment FOR
            SELECT
                a.assignment_id AS "AssignmentId",
                a.task_id AS "Task",
                a.user_id AS "User",
                a.updated_at AS UpdatedAt,
                a.vector_id AS "VectorId",
                a.status
            FROM
                assignments a
            WHERE
                a.assignment_id = i_assignment_id
            FETCH FIRST ROW ONLY;
        END;

    PROCEDURE get_assignments_by_task_id(i_task_id IN taskmaster.assignments.task_id%TYPE,
                                         c_assignments OUT r_c_assignments)
        IS
        BEGIN
            OPEN c_assignments FOR
            SELECT
                a.assignment_id AS "AssignmentId",
                a.task_id AS "Task",
                a.user_id AS "User",
                a.updated_at AS UpdatedAt,
                a.vector_id AS "VectorId",
                a.status
            FROM
                assignments a
            WHERE
                a.task_id = i_task_id;
        END;

    PROCEDURE get_assignments_by_user_id(i_user_id IN taskmaster.assignments.user_id%TYPE,
                                         c_assignments OUT r_c_assignments)
        IS
        BEGIN
            OPEN c_assignments FOR
            SELECT
                a.assignment_id AS "AssignmentId",
                a.task_id AS "Task",
                a.user_id AS "User",
                a.updated_at AS UpdatedAt,
                a.vector_id AS "VectorId",
                a.status
            FROM
                assignments a
            WHERE
                a.user_id = i_user_id;
        END;

    PROCEDURE insert_assignment(
        i_task_id IN taskmaster.assignments.task_id%TYPE,
        i_user_id IN taskmaster.assignments.user_id%TYPE,
        i_status_id IN taskmaster.assignments.task_id%TYPE,
        c_inserted_assignment OUT r_c_assignments)
        IS
            v_new_assignment_id taskmaster.assignments.assignment_id%TYPE;
        BEGIN
            INSERT INTO assignments(
                task_id,
                user_id,
                created_at,
                updated_at,
                status
            ) VALUES (
                i_task_id,
                i_user_id,
                SYSDATE,
                SYSDATE,
                i_status_id
            )
            RETURNING assignment_id INTO v_new_assignment_id;

            get_assignment_by_id(v_new_assignment_id, c_inserted_assignment);
        END;

    PROCEDURE update_assignment(
        i_assignment_id IN taskmaster.assignments.assignment_id%TYPE,
        i_task_id IN taskmaster.assignments.task_id%TYPE,
        i_user_id IN taskmaster.assignments.user_id%TYPE,
        i_status_id IN taskmaster.assignments.task_id%TYPE,
        c_updated_assignment OUT r_c_assignments)
        IS
        BEGIN
            
            UPDATE taskmaster.assignments
            SET
                task_id = i_task_id,
                user_id = i_user_id,
                updated_at = sysdate,
                status = i_status_id
            WHERE
                assignment_id = i_assignment_id;

            get_assignment_by_id(i_assignment_id, c_updated_assignment);
        END;

    PROCEDURE link_to_vector(
        i_assignment_id IN taskmaster.assignments.assignment_id%TYPE,
        i_vector_id IN taskmaster.assignments.vector_id%TYPE)
        IS
        BEGIN
            UPDATE taskmaster.assignments
            SET vector_id = i_vector_id
            WHERE assignment_id = i_assignment_id;
        END;

    PROCEDURE get_assignment_by_vector_id(i_vector_id IN taskmaster.assignments.vector_id%TYPE, c_assignment OUT r_c_assignments)
        IS
        BEGIN
            OPEN c_assignment FOR
            SELECT
                a.assignment_id AS "AssignmentId",
                a.task_id AS "Task",
                a.user_id AS "User",
                a.updated_at AS UpdatedAt,
                a.vector_id AS "VectorId",
                a.status
            FROM
                assignments a
            WHERE
                trim(a.vector_id) like trim(i_vector_id);
        END;


END assignments_core;
/

create PACKAGE            users_core AS
    TYPE r_c_users IS REF CURSOR;

    PROCEDURE get_users(c_users OUT r_c_users);
    PROCEDURE get_user_by_id(i_user_id IN taskmaster.users.user_id%TYPE, c_user OUT r_c_users);

END users_core;
/

create PACKAGE BODY            users_core AS

    PROCEDURE get_users(c_users OUT r_c_users)
        IS
        BEGIN
            OPEN c_users FOR
            SELECT
                u.user_id AS "UserId",
                u.username,
                u.email,
                u.password_hash AS "PassowrdHash",
                u.salt,
                u.role,
                u.created_at AS "CreatedAt",
                u.updated_at AS "UpdatedAt",
                u.status
            FROM
                users u;

        END;

    PROCEDURE get_user_by_id(i_user_id IN taskmaster.users.user_id%TYPE, c_user OUT r_c_users)
        IS
        BEGIN
            OPEN c_user FOR
            SELECT
                u.user_id AS "UserId",
                u.username,
                u.email,
                u.password_hash AS "PassowrdHash",
                u.salt,
                u.role,
                u.created_at AS "CreatedAt",
                u.updated_at AS "UpdatedAt",
                u.status
            FROM
                users u
            WHERE
                u.user_id = i_user_id
            FETCH FIRST ROW ONLY;
        END;

END users_core;
/

create PACKAGE         statuses_core AS
    TYPE r_c_statuses IS REF CURSOR;

    PROCEDURE get_statuses(c_statuses OUT r_c_statuses);
    PROCEDURE get_status_by_id(i_status_id IN taskmaster.status.status_id%TYPE, c_status OUT r_c_statuses);

END statuses_core;
/

create PACKAGE BODY         statuses_core AS

    PROCEDURE get_statuses(c_statuses OUT r_c_statuses)
        IS
        BEGIN
            OPEN c_statuses FOR
            SELECT
                s.status_id AS "StatusId",
                s.name,
                s.description
            FROM
                status s;
        END;

    PROCEDURE get_status_by_id(i_status_id IN taskmaster.status.status_id%TYPE, c_status OUT r_c_statuses)
        IS
        BEGIN
            OPEN c_status FOR
            SELECT
                s.status_id AS "StatusId",
                s.name,
                s.description
            FROM
                status s
            WHERE
                s.status_id = i_status_id
            FETCH FIRST ROW ONLY;
        END;

END statuses_core;
/

create PACKAGE            task_types_core AS
    TYPE r_c_task_types IS REF CURSOR;
    PROCEDURE get_task_types(c_task_types OUT r_c_task_types);
    PROCEDURE get_task_types_by_id(i_task_type_id IN taskmaster.task_types.task_type_id%TYPE, c_task_type OUT r_c_task_types);

END task_types_core;
/

create PACKAGE BODY            task_types_core AS

    PROCEDURE get_task_types(c_task_types OUT r_c_task_types)
        IS
        BEGIN
            OPEN c_task_types FOR
            SELECT
                t.task_type_id AS "TaskTypeId",
                t.name,
                t.description
            FROM
                task_types t;
        END;

    PROCEDURE get_task_types_by_id(i_task_type_id IN taskmaster.task_types.task_type_id%TYPE, c_task_type OUT r_c_task_types)
        IS
        BEGIN
            OPEN c_task_type FOR
            SELECT
                t.task_type_id AS "TaskTypeId",
                t.name,
                t.description
            FROM
                task_types t
            WHERE
                t.task_type_id = i_task_type_id
            FETCH FIRST ROW ONLY;
        END;

END task_types_core;
/

