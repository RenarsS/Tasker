create sequence TASK_ID_SEQ
    cache 10
/

create sequence COMMENT_ID_SEQ
    cache 10
/

create sequence USER_ID_SEQ
    cache 10
/

create sequence ROLE_ID_SEQ
    cache 10
/

create sequence TASK_TYPE_ID_SEQ
    cache 10
/

create sequence STATUS_ID_SEQ
    cache 10
/

create sequence TIME_REPORT_ID_SEQ
    cache 10
/

create sequence AUDIT_LOG_SEQ
    cache 10
/

create sequence RESPONSE_ID_SEQ
    cache 10
/

create sequence QUERY_ID_SEQ
    cache 10
/

create table ROLES
(
    ROLE_ID     NUMBER generated as identity
        constraint ROLES_PK
            primary key,
    NAME        NVARCHAR2(50) not null,
    DESCRIPTION NVARCHAR2(400)
)
/

comment on column ROLES.ROLE_ID is 'Role identifier'
/

comment on column ROLES.NAME is 'Name of the role'
/

comment on column ROLES.DESCRIPTION is 'Description of the role'
/

create table TASK_TYPES
(
    TASK_TYPE_ID NUMBER generated as identity
        constraint TASK_TYPES_PK
            primary key,
    NAME         NVARCHAR2(50) not null,
    DESCRIPTION  NVARCHAR2(400)
)
/

comment on table TASK_TYPES is 'Holds information about available task types.'
/

comment on column TASK_TYPES.TASK_TYPE_ID is 'Identifier of the task type.'
/

comment on column TASK_TYPES.NAME is 'Name of the task type.'
/

comment on column TASK_TYPES.DESCRIPTION is 'Description of the task type.'
/

create table STATUS
(
    STATUS_ID   NUMBER        not null
        constraint STATUS_PK
            primary key,
    NAME        NVARCHAR2(20) not null,
    DESCRIPTION NVARCHAR2(400)
)
/

comment on table STATUS is 'Holds all types of status of the tasks.'
/

comment on column STATUS.STATUS_ID is 'Identifier of the status.'
/

comment on column STATUS.NAME is 'Title of the status.'
/

comment on column STATUS.DESCRIPTION is 'Description of the status'
/

create table TASKS
(
    TASK_ID         NUMBER default "TASKER"."ISEQ$$_75781".nextval generated by default on null as identity
		constraint TASKS_PK
			primary key,
    TASK_TYPE       NUMBER                 not null
        constraint TASKS_TASK_TYPES_TASK_TYPE_ID_FK
            references TASK_TYPES,
    TITLE           NVARCHAR2(255)         not null,
    DESCRIPTION     NVARCHAR2(1000)        not null,
    STATUS          NUMBER                 not null
        constraint TASKS_STATUS_STATUS_ID_FK
            references STATUS,
    CREATED_BY      NUMBER                 not null,
    CREATED_AT      DATE   default SYSDATE not null,
    UPDATED_AT      DATE   default SYSDATE not null,
    DUE             DATE                   not null,
    VECTOR_ID       NVARCHAR2(200),
    ORDER_VECTOR_ID NVARCHAR2(200)
)
/

comment on table TASKS is 'Holds information of the tasks.'
/

comment on column TASKS.TASK_ID is 'Identifier of the task.'
/

comment on column TASKS.TASK_TYPE is 'Type of the task'
/

comment on column TASKS.TITLE is 'Short summary of the task.'
/

comment on column TASKS.DESCRIPTION is 'Instructions of the task.'
/

comment on column TASKS.STATUS is 'Status of the task.'
/

comment on column TASKS.CREATED_BY is 'Creator of the task.'
/

comment on column TASKS.CREATED_AT is 'Date of creation.'
/

comment on column TASKS.UPDATED_AT is 'Last update date. Triggered by comment addition.'
/

comment on column TASKS.DUE is 'd'
/

create trigger INSERT_TASK_TRG
    before insert
    on TASKS
    for each row
BEGIN

        SELECT TASK_ID_SEQ.NEXTVAL
        INTO :new.TASK_ID
        FROM DUAL;

    END;
/

create table AUDIT_LOG
(
    LOG_ID  NUMBER       default "TASKER"."ISEQ$$_75796".nextval generated as identity
		constraint AUDIT_LOG_PK
			primary key,
    USER_ID NUMBER,
    ACTION  VARCHAR2(300)                not null,
    TIME    TIMESTAMP(6) default SYSDATE not null,
    DETAILS VARCHAR2(500)
)
/

comment on table AUDIT_LOG is 'Holds information about all actions done by users.'
/

comment on column AUDIT_LOG.LOG_ID is 'Identifier of the log.'
/

comment on column AUDIT_LOG.USER_ID is 'User which did the action.'
/

comment on column AUDIT_LOG.ACTION is 'Description of the action.'
/

comment on column AUDIT_LOG.TIME is 'Time of the action.'
/

comment on column AUDIT_LOG.DETAILS is 'Additional information about done action.'
/

create table USERS
(
    USER_ID       NUMBER default "TASKER"."ISEQ$$_75812".nextval generated as identity
		constraint USERS_PK
			primary key,
    USERNAME      NVARCHAR2(50)          not null,
    EMAIL         NVARCHAR2(100)         not null,
    PASSWORD_HASH NVARCHAR2(255)         not null,
    SALT          NVARCHAR2(40)          not null,
    ROLE          NUMBER                 not null
        constraint USERS_ROLES_ROLE_ID_FK
            references ROLES,
    CREATED_AT    DATE   default SYSDATE not null,
    UPDATED_AT    DATE   default SYSDATE not null,
    STATUS        NUMBER default 0       not null
)
/

comment on table USERS is 'Holds all users used for authentication and business logic.'
/

comment on column USERS.USER_ID is 'Identifier of the users'
/

comment on column USERS.USERNAME is 'Username of the user given by administrator.'
/

comment on column USERS.EMAIL is 'Email address of the user.'
/

comment on column USERS.PASSWORD_HASH is 'Hashed password of the user.'
/

comment on column USERS.SALT is 'String of characters used for password salting.'
/

comment on column USERS.ROLE is 'Role of the user.'
/

comment on column USERS.CREATED_AT is 'Date when user was created.'
/

comment on column USERS.UPDATED_AT is 'Date of the last update of the user.'
/

comment on column USERS.STATUS is 'Status of the user. 1 - Active / 0  - Disabled.'
/

create table ASSIGNMENTS
(
    ASSIGNMENT_ID NUMBER default "TASKER"."ISEQ$$_75785".nextval generated by default on null as identity
		constraint ASSIGNMENTS_PK
			primary key,
    TASK_ID       NUMBER
        constraint ASSIGNMENTS_TASKS_TASK_ID_FK
            references TASKS,
    USER_ID       NUMBER                 not null
        constraint ASSIGNMENTS_USERS_USER_ID_FK
            references USERS,
    CREATED_AT    DATE   default SYSDATE not null,
    UPDATED_AT    DATE   default SYSDATE not null,
    STATUS        NUMBER                 not null,
    VECTOR_ID     NVARCHAR2(200)
)
/

comment on table ASSIGNMENTS is 'Used for linking users and tasks.'
/

comment on column ASSIGNMENTS.ASSIGNMENT_ID is 'Identifier of the assignment.'
/

comment on column ASSIGNMENTS.TASK_ID is 'Task assigned to the user. '
/

comment on column ASSIGNMENTS.USER_ID is 'User assigned to the task.'
/

comment on column ASSIGNMENTS.CREATED_AT is 'Date of the initial user assignment.'
/

comment on column ASSIGNMENTS.UPDATED_AT is 'Assignment record update date.'
/

comment on column ASSIGNMENTS.STATUS is 'Stratus of the assignment.'
/

create trigger INSERT_ASSIGNMENT_TRG
    before insert
    on ASSIGNMENTS
    for each row
BEGIN

        SELECT ASSIGNMENT_ID_SEQ.NEXTVAL
        INTO :new.ASSIGNMENT_ID
        FROM DUAL;

    END;
/

create table COMMENTS
(
    COMMENT_ID NUMBER default "TASKER"."ISEQ$$_75789".nextval generated by default on null as identity
		constraint COMMENTS_PK
			primary key,
    TASK_ID    NUMBER                 not null
        constraint COMMENTS_TASKS_TASK_ID_FK
            references TASKS,
    USER_ID    NUMBER
        constraint COMMENTS_USERS_USER_ID_FK
            references USERS,
    CONTENT    NVARCHAR2(2000)        not null,
    CREATED_AT DATE   default SYSDATE not null,
    VECTOR_ID  NVARCHAR2(200)
)
/

comment on table COMMENTS is 'Holds additional information related to the task.'
/

comment on column COMMENTS.COMMENT_ID is 'Identifier of the comment.'
/

comment on column COMMENTS.TASK_ID is 'Task to which comment was added.'
/

comment on column COMMENTS.USER_ID is 'Comment creator.'
/

comment on column COMMENTS.CONTENT is 'Content of the actual comment.'
/

comment on column COMMENTS.CREATED_AT is 'Comment creation time.'
/

create trigger INSERT_COMMENT_TRG
    before insert
    on COMMENTS
    for each row
BEGIN

        SELECT COMMENT_ID_SEQ.NEXTVAL
        INTO :new.COMMENT_ID
        FROM DUAL;

    END;
/

create table TIME_REPORTS
(
    TIME_REPORT_ID NUMBER default "TASKER"."ISEQ$$_75793".nextval generated as identity
		constraint TIME_REPORTS_PK
			primary key,
    TASK_ID        NUMBER
        constraint TIME_REPORTS_TASKS_TASK_ID_FK
            references TASKS,
    USER_ID        NUMBER
        constraint TIME_REPORTS_USERS_USER_ID_FK
            references USERS,
    BEGINNING      DATE                   not null,
    END            DATE,
    TIME_SPENT     DATE,
    REPORT_DATE    DATE   default SYSDATE not null
)
/

comment on table TIME_REPORTS is 'Holds information about time spent on tasks. '
/

comment on column TIME_REPORTS.TIME_REPORT_ID is 'Identifier of the time report.'
/

comment on column TIME_REPORTS.TASK_ID is 'Task to which time is being reported.'
/

comment on column TIME_REPORTS.USER_ID is 'User on behalf of which time is being reported to the task.'
/

comment on column TIME_REPORTS.BEGINNING is 'Time when task fulfilling was started.'
/

comment on column TIME_REPORTS.END is 'Time which task was finished.'
/

comment on column TIME_REPORTS.TIME_SPENT is 'Time spent on a task.'
/

comment on column TIME_REPORTS.REPORT_DATE is 'Date when report was submitted.'
/

create unique index USERS_USERNAME_UINDEX
    on USERS (USERNAME)
/

alter table USERS
    add constraint USERS_PK_2
        unique (USERNAME)
/

create table RESPONSES
(
    RESPONSE_ID        NUMBER default "TASKER"."ISEQ$$_76140".nextval generated as identity (cache 10)
		constraint RESPONSE_PK
			primary key,
    COMMENT_ID         NUMBER not null,
    INPUT_TOKEN_COUNT  NUMBER default 0,
    OUTPUT_TOKEN_COUNT NUMBER default 0,
    TOTAL_TOKEN_COUNT  NUMBER default 0
)
/

comment on table RESPONSES is 'Holds information about responses generated by LLM.'
/

comment on column RESPONSES.RESPONSE_ID is 'Identifier of the response record.'
/

comment on column RESPONSES.COMMENT_ID is 'Response'
/

comment on column RESPONSES.INPUT_TOKEN_COUNT is 'Amount of tokens used for input.'
/

comment on column RESPONSES.OUTPUT_TOKEN_COUNT is 'Amount of tokens used for output.'
/

comment on column RESPONSES.TOTAL_TOKEN_COUNT is 'Total amount of tokens used in generation.'
/

create table QUERIES
(
    QUERY_ID    NUMBER generated as identity (cache 10)
        constraint QUERY_PK
            primary key,
    RESPONSE_ID NUMBER
        constraint QUERY_RESPONSE_RESPONSE_ID_FK
            references RESPONSES,
    VECTOR_ID   NVARCHAR2(100)
)
/

comment on table QUERIES is 'LLM query link to vector.'
/

comment on column QUERIES.QUERY_ID is 'Identifier of the query.'
/

comment on column QUERIES.RESPONSE_ID is 'Response of the query.'
/

comment on column QUERIES.VECTOR_ID is 'Identifier of the query in vector database.'
/

create table QUERY_RESPONSE_RATINGS
(
    QUERY_ID     NUMBER
        constraint QUERY_RESPONSE_RATING_QUERY_QUERY_ID_FK
            references QUERIES,
    RESPONSE_ID  NUMBER
        constraint QUERY_RESPONSE_RATING_RESPONSE_RESPONSE_ID_FK
            references RESPONSES,
    RATING       NUMBER(16, 15),
    IS_PROCESSED CHAR   default 'N',
    RATING_ID    NUMBER default "TASKER"."ISEQ$$_76146".nextval generated as identity (cache 10)
)
/

comment on table QUERY_RESPONSE_RATINGS is 'Holds ratings of the similarity of quer and generated response to it.'
/

comment on column QUERY_RESPONSE_RATINGS.QUERY_ID is 'Identifier of the query.'
/

comment on column QUERY_RESPONSE_RATINGS.RESPONSE_ID is 'Identifier of the response to the query.'
/

comment on column QUERY_RESPONSE_RATINGS.RATING is 'Cosine similarity of the query and response embeddings.'
/

create table RESPONSE_RETRIEVAL_RATINGS
(
    RESPONSE_ID  NUMBER
        constraint RESPONSE_RETRIEVAL_RATING_RESPONSE_RESPONSE_ID_FK
            references RESPONSES,
    TASK_ID      NUMBER
        constraint RESPONSE_RETRIEVAL_RATING_TASKS_TASK_ID_FK
            references TASKS,
    RATING       NUMBER(16, 15),
    IS_PROCESSED CHAR   default 'N',
    RATING_ID    NUMBER default "TASKER"."ISEQ$$_76147".nextval generated as identity (cache 10)
)
/

comment on table RESPONSE_RETRIEVAL_RATINGS is 'Rating of similarity of response and retrieved tasks.'
/

comment on column RESPONSE_RETRIEVAL_RATINGS.RESPONSE_ID is 'Identifier of the response.'
/

comment on column RESPONSE_RETRIEVAL_RATINGS.TASK_ID is 'Identifier of the task.'
/

comment on column RESPONSE_RETRIEVAL_RATINGS.RATING is 'Cosine similarity of response and tasks used for its generation.'
/

create table TASK_RETRIEVAL_RATINGS
(
    TASK_ID           NUMBER
        constraint TASK_RETRIEVAL_RATING_TASKS_TASK_ID_FK
            references TASKS,
    RETRIEVED_TASK_ID NUMBER
        constraint TASK_RETRIEVAL_RATING_TASKS_TASK_ID_FK_2
            references TASKS,
    RATING            NUMBER(16, 15)
)
/

comment on table TASK_RETRIEVAL_RATINGS is 'Ratings of similarity of the task and tasks retrieved for RAG.'
/

comment on column TASK_RETRIEVAL_RATINGS.TASK_ID is 'Identifier of the task.'
/

comment on column TASK_RETRIEVAL_RATINGS.RETRIEVED_TASK_ID is 'Identifier of the task retrieved.'
/

comment on column TASK_RETRIEVAL_RATINGS.RATING is 'Cosine similarity between the task and retrieved task.'
/

create view TASKS_WITH_RECOMMENDATIONS as
SELECT
    t.task_id,
    t.task_type,
    COUNT(r.response_id) AS response_count
FROM tasker.responses r
    INNER JOIN tasker.comments c ON c.comment_id = r.comment_id
        INNER JOIN tasker.tasks t ON t.task_id = c.task_id
    INNER JOIN tasker.queries q ON q.response_id = r.response_id
GROUP BY
    t.task_id,
    t.task_type
HAVING
    COUNT(r.response_id) = 5
ORDER BY
    t.task_type
/

create view TASK_DISTRIBUTIONS_BY_TYPE as
SELECT
    tt.name,
    COUNT(t.task_id) AS task_count
FROM tasker.task_types tt
    INNER JOIN tasker.tasks t on t.task_type = tt.task_type_id
GROUP BY
    tt.name,
    t.task_type,
    tt.task_type_id
ORDER BY tt.task_type_id
/

create view RESPONSE_AGGREGATION as
SELECT
    t.task_id,
    q.query_id,
    r.response_id,
    r.comment_id,
    r.input_token_count,
    COUNT(rrr.task_id)-1 AS retrieved_task_count,
    qrr.rating AS query_response_rating
FROM tasker.queries q
    INNER JOIN tasker.responses r ON r.response_id = q.response_id
        INNER JOIN tasker.comments c ON c.comment_id = r.comment_id
            INNER JOIN tasker.tasks t ON t.task_id = c.task_id
    INNER JOIN tasker.response_retrieval_ratings rrr ON rrr.response_id = r.response_id
    LEFT JOIN tasker.query_response_ratings qrr ON qrr.response_id = r.response_id
GROUP BY rrr.response_id, r.response_id, q.query_id, t.task_id, r.comment_id, qrr.rating, r.input_token_count
/

create view QUERY_RESPONSE_RETRIEVAL_RATINGS as
SELECT
        t.task_id,
        t.task_type,
        (select task_type from tasks where task_id = rrr.task_id) as retrieved_task_type,
        q.query_id,
        r.response_id,
        r.input_token_count,
        ra.retrieved_task_count,
        qrr.rating AS query_response_rating,
        rrr.task_id AS retrieved_task_id,
        rrr.rating AS response_retrieval_rating
    FROM tasker.queries q
        INNER JOIN tasker.responses r ON r.response_id = q.response_id
            INNER JOIN tasker.comments c ON c.comment_id = r.comment_id
                INNER JOIN tasker.tasks t ON t.task_id = c.task_id
            INNER JOIN tasker.query_response_ratings qrr ON q.query_id = qrr.query_id AND r.response_id = qrr.response_id
        INNER JOIN tasker.response_retrieval_ratings rrr ON rrr.response_id = r.response_id
        LEFT JOIN tasker.response_aggregation ra ON ra.response_id = r.response_id
/

create view TASK_RECOMMENDATIONS as
SELECT
    t.task_id,
    t.task_type,
    t.title,
    t.description,
    c.content,
    ra.retrieved_task_count
FROM tasker.response_aggregation ra
    INNER JOIN tasker.tasks t ON t.task_id = ra.TASK_ID
    INNER JOIN tasker.comments c ON c.comment_id = ra.comment_id
/

create view TASKS_RECOMMENDATIONS_TEXT as
SELECT
    t.task_id,
    t.task_type,
    t.title,
    t.description,
    c.content,
    ra.retrieved_task_count
FROM tasker.response_aggregation ra
    INNER JOIN tasker.tasks t ON t.task_id = ra.TASK_ID
    INNER JOIN tasker.comments c ON c.comment_id = ra.comment_id
/

create view Q_R_RATINGS_RETRIEVAL_BY_COUNT as
WITH Q_R_RATINGS AS (
    SELECT
        *
    FROM tasker.response_aggregation
),
TASK_Q_R_PIVOT AS (
    SELECT
    task_id,
    MAX(CASE WHEN retrieved_task_count = 1 THEN query_response_rating END) AS zero,
    MAX(CASE WHEN retrieved_task_count = 4 THEN query_response_rating END) AS three,
    MAX(CASE WHEN retrieved_task_count = 7 THEN query_response_rating END) AS six,
    MAX(CASE WHEN retrieved_task_count = 10 THEN query_response_rating END) AS nine,
    MAX(CASE WHEN retrieved_task_count = 12 THEN query_response_rating END) AS eleven
FROM Q_R_RATINGS
GROUP BY task_id
)
SELECT
    "TASK_ID","ZERO","THREE","SIX","NINE","ELEVEN"
FROM TASK_Q_R_PIVOT
WHERE zero IS NOT NULL
    AND three IS NOT NULL
    AND six IS NOT NULL
    AND nine IS NOT NULL
    AND eleven IS NOT NULL
/

create PACKAGE            tasks_core AS
    TYPE r_c_tasks IS REF CURSOR;

    PROCEDURE get_tasks(c_tasks OUT r_c_tasks);
    PROCEDURE get_task_by_id(i_task_id IN tasker.tasks.task_id%TYPE, c_task OUT r_c_tasks);
    PROCEDURE insert_task(
        i_task_type IN tasker.tasks.task_type%TYPE,
        i_title IN tasker.tasks.title%TYPE,
        i_description IN tasker.tasks.description%TYPE,
        i_status IN tasker.tasks.status%TYPE,
        i_created_by IN tasker.tasks.created_by%TYPE,
        i_due IN tasker.tasks.due%TYPE,
        o_new_task_id OUT tasker.tasks.task_id%TYPE);

    PROCEDURE update_task(
        i_task_id IN tasker.tasks.task_id%TYPE,
        i_task_type IN tasker.tasks.task_type%TYPE,
        i_title IN tasker.tasks.title%TYPE,
        i_description IN tasker.tasks.description%TYPE,
        i_status IN tasker.tasks.status%TYPE,
        i_due IN tasker.tasks.due%TYPE,
        c_updated_task OUT r_c_tasks);

    PROCEDURE delete_task(i_task_id IN tasker.tasks.task_id%TYPE);
        
    PROCEDURE link_to_vector(
        i_task_id IN tasker.tasks.task_id%TYPE,
        i_vector_id IN tasker.tasks.vector_id%TYPE);

    PROCEDURE link_to_order_vector(
        i_task_id IN tasker.tasks.task_id%TYPE,
        i_order_vector_id IN tasker.tasks.order_vector_id%TYPE);

    PROCEDURE get_task_by_vector_id(i_vector_id IN tasker.tasks.vector_id%TYPE, c_task OUT r_c_tasks);

    PROCEDURE insert_task_retrieval_rating(
        i_task_id IN tasker.TASK_RETRIEVAL_RATINGS.TASK_ID%TYPE,
        i_retrieved_task_id IN tasker.TASK_RETRIEVAL_RATINGS.RETRIEVED_TASK_ID%TYPE,
        i_rating IN tasker.TASK_RETRIEVAL_RATINGS.rating%TYPE,
        o_task_id OUT tasker.TASK_RETRIEVAL_RATINGS.TASK_ID%TYPE);

END tasks_core;
/

create PACKAGE BODY tasks_core AS

    PROCEDURE get_tasks (c_tasks OUT r_c_tasks)
    IS
    BEGIN
        OPEN c_tasks FOR
        SELECT
            t.task_id AS TaskId,
            t.task_type AS TaskType,
            t.title AS Title,
            t.description AS Description,
            t.status AS Status,
            t.created_by AS CreatedBy,
            t.created_at AS CreatedAt,
            t.updated_at AS UpdatedAt,
            t.vector_id AS VectorId,
            t.order_vector_id As OrderVectorId,
            t.due AS Due
        FROM
            tasker.tasks t;
    END get_tasks;

    PROCEDURE get_task_by_id(i_task_id IN tasker.tasks.task_id%TYPE,
                             c_task OUT r_c_tasks)
        IS
        BEGIN
            OPEN c_task FOR
            SELECT
                t.task_id AS TaskId,
                t.task_type AS TaskType,
                t.title AS Title,
                t.description AS Description,
                t.status AS Status,
                t.created_by AS CreatedBy,
                t.created_at AS CreatedAt,
                t.updated_at AS UpdatedAt,
                t.vector_id AS VectorId,
                t.order_vector_id As OrderVectorId,
                t.due AS Due
            FROM
                tasker.tasks t
            WHERE
                t.task_id = i_task_id
            FETCH FIRST ROW ONLY;
        END get_task_by_id;

    PROCEDURE insert_task(
        i_task_type IN tasker.tasks.task_type%TYPE,
        i_title IN tasker.tasks.title%TYPE,
        i_description IN tasker.tasks.description%TYPE,
        i_status IN tasker.tasks.status%TYPE,
        i_created_by IN tasker.tasks.created_by%TYPE,
        i_due IN tasker.tasks.due%TYPE,
        o_new_task_id OUT tasker.tasks.task_id%TYPE
    )
        IS
        BEGIN

            INSERT INTO tasker.tasks(
                task_type,
                title,
                description,
                status,
                created_by,
                created_at,
                updated_at,
                due
            ) VALUES (
                i_task_type,
                i_title,
                i_description,
                i_status,
                i_created_by,
                SYSDATE,
                SYSDATE,
                i_due
            )
            RETURNING task_id INTO o_new_task_id;

        END insert_task;

    PROCEDURE update_task(
        i_task_id IN tasker.tasks.task_id%TYPE,
        i_task_type IN tasker.tasks.task_type%TYPE,
        i_title IN tasker.tasks.title%TYPE,
        i_description IN tasker.tasks.description%TYPE,
        i_status IN tasker.tasks.status%TYPE,
        i_due IN tasker.tasks.due%TYPE,
        c_updated_task OUT r_c_tasks)
        IS
        BEGIN

            UPDATE tasker.tasks
            SET
                task_type = i_task_type,
                title = i_title,
                description = i_description,
                status = i_status,
                updated_at = SYSDATE,
                due = i_due
            WHERE
                task_id = i_task_id;

            get_task_by_id(i_task_id, c_updated_task);
        END update_task;

    PROCEDURE delete_task(i_task_id IN tasker.tasks.task_id%TYPE)
    IS
    BEGIN
        DELETE FROM tasker.tasks WHERE task_id = i_task_id;
    END delete_task;
        
    PROCEDURE link_to_vector(
        i_task_id IN tasker.tasks.task_id%TYPE,
        i_vector_id IN tasker.tasks.vector_id%TYPE)
    IS
    BEGIN
        UPDATE tasker.TASKS
        SET vector_id = i_vector_id
        WHERE task_id = i_task_id;
    END;

    PROCEDURE link_to_order_vector(
        i_task_id IN tasker.tasks.task_id%TYPE,
        i_order_vector_id IN tasker.tasks.order_vector_id%TYPE)
    IS
    BEGIN
        UPDATE tasker.TASKS
        SET order_vector_id = i_order_vector_id
        WHERE task_id = i_task_id;
    END;

    PROCEDURE get_task_by_vector_id(i_vector_id IN tasker.tasks.vector_id%TYPE, c_task OUT r_c_tasks)
        IS
        BEGIN
            OPEN c_task FOR
            SELECT
                t.task_id AS TaskId,
                t.task_type AS TaskType,
                t.title AS Title,
                t.description AS Description,
                t.status AS Status,
                t.created_by AS CreatedBy,
                t.created_at AS CreatedAt,
                t.updated_at AS UpdatedAt,
                t.vector_id AS VectorId,
                t.order_vector_id As OrderVectorId,
                t.due AS Due
            FROM
                tasker.tasks t
            WHERE
                TRIM(t.vector_id) LIKE TRIM(i_vector_id)
            FETCH FIRST ROW ONLY;
        END;

    PROCEDURE insert_task_retrieval_rating(
        i_task_id IN tasker.TASK_RETRIEVAL_RATINGS.TASK_ID%TYPE,
        i_retrieved_task_id IN tasker.TASK_RETRIEVAL_RATINGS.RETRIEVED_TASK_ID%TYPE,
        i_rating IN tasker.TASK_RETRIEVAL_RATINGS.rating%TYPE,
        o_task_id OUT tasker.TASK_RETRIEVAL_RATINGS.TASK_ID%TYPE)
        IS
        BEGIN
            INSERT INTO TASKER.TASK_RETRIEVAL_RATINGS(
                TASK_ID,
                RETRIEVED_TASK_ID,
                RATING
            ) VALUES (
                i_task_id,
                i_retrieved_task_id,
                i_rating)
            RETURNING TASK_ID INTO o_task_id;
        END;

END tasks_core;
/

create PACKAGE            comments_core AS
    TYPE r_c_comments IS REF CURSOR;

    PROCEDURE get_comments(c_comments OUT r_c_comments);
    PROCEDURE get_comment_by_id(i_comment_id tasker.comments.comment_id%TYPE, c_comment OUT r_c_comments);
    PROCEDURE get_comments_by_task_id(i_task_id tasker.comments.task_id%TYPE, c_comments OUT r_c_comments);
    PROCEDURE insert_comment(
        i_task_id IN tasker.comments.task_id%TYPE,
        i_user_id IN tasker.comments.user_id%TYPE,
        i_content IN tasker.comments.content%TYPE,
        c_inserted_comment OUT r_c_comments);

    PROCEDURE update_comment(
        i_comment_id IN tasker.comments.comment_id%TYPE,
        i_content IN tasker.comments.content%TYPE,
        c_updated_comment OUT r_c_comments);

    PROCEDURE delete_comment(i_comment_id IN tasker.comments.comment_id%TYPE);

    PROCEDURE link_to_vector(
        i_comment_id IN tasker.comments.comment_id%TYPE,
        i_vector_id IN tasker.comments.vector_id%TYPE);

END comments_core;
/

create PACKAGE BODY            comments_core AS

    PROCEDURE get_comments(c_comments OUT r_c_comments)
        IS
        BEGIN
            OPEN c_comments FOR
            SELECT
                c.comment_id AS CommentId,
                c.task_id AS "Task",
                c.user_id AS "User",
                c.content AS Content,
                c.created_at AS CreatedAt,
                c.vector_id AS VectorId
            FROM
                tasker.comments c;
        END;

    PROCEDURE get_comment_by_id(i_comment_id tasker.comments.comment_id%TYPE, c_comment OUT r_c_comments)
        IS
        BEGIN
            OPEN c_comment FOR
            SELECT
                c.comment_id AS CommentId,
                c.task_id AS "Task",
                c.user_id AS "User",
                c.content AS Content,
                c.created_at AS CreatedAt,
                c.vector_id AS VectorId
            FROM
                tasker.comments c
            WHERE
                c.comment_id = i_comment_id
            FETCH FIRST ROW ONLY;
        END;

    PROCEDURE get_comments_by_task_id(i_task_id tasker.comments.task_id%TYPE, c_comments OUT r_c_comments)
        IS
        BEGIN
            OPEN c_comments FOR
            SELECT
                c.comment_id AS CommentId,
                c.task_id AS "Task",
                c.user_id AS "User",
                c.content AS Content,
                c.created_at AS CreatedAt,
                c.vector_id AS VectorId
            FROM
                tasker.comments c
            WHERE
                c.task_id = i_task_id;
        END;

    PROCEDURE insert_comment(
        i_task_id IN tasker.comments.task_id%TYPE,
        i_user_id IN tasker.comments.user_id%TYPE,
        i_content IN tasker.comments.content%TYPE,
        c_inserted_comment OUT r_c_comments)
        IS
            v_new_comment_id tasker.comments.comment_id%TYPE;
        BEGIN
            INSERT INTO comments(
                task_id,
                user_id,
                content,
                created_at
            ) VALUES (
                i_task_id,
                i_user_id,
                i_content,
                SYSDATE
            )
            RETURNING comment_id INTO v_new_comment_id;

            get_comment_by_id(v_new_comment_id, c_inserted_comment);
        END;

    PROCEDURE update_comment(
        i_comment_id IN tasker.comments.comment_id%TYPE,
        i_content IN tasker.comments.content%TYPE,
        c_updated_comment OUT r_c_comments)
        IS
        BEGIN
            UPDATE tasker.COMMENTS
            SET
                content = i_content
            WHERE
                comment_id = i_comment_id;

            get_comment_by_id(i_comment_id, c_updated_comment);
        END;

    PROCEDURE delete_comment(i_comment_id IN tasker.comments.comment_id%TYPE)
        IS
        BEGIN
            DELETE FROM comments WHERE comment_id = i_comment_id;
        END;

    PROCEDURE link_to_vector(
        i_comment_id IN tasker.comments.comment_id%TYPE,
        i_vector_id IN tasker.comments.vector_id%TYPE)
        IS
        BEGIN
            UPDATE tasker.comments
            SET vector_id = i_vector_id
            WHERE comment_id = i_comment_id;
        END;

END comments_core;
/

create PACKAGE            assignments_core AS
    TYPE r_c_assignments IS REF CURSOR;

    PROCEDURE get_assignments(c_assignments OUT r_c_assignments);
    PROCEDURE get_assignment_by_id(i_assignment_id IN tasker.assignments.assignment_id%TYPE, c_assignment OUT r_c_assignments);
    PROCEDURE get_assignments_by_task_id(i_task_id IN tasker.assignments.task_id%TYPE, c_assignments OUT r_c_assignments);
    PROCEDURE get_assignments_by_user_id(i_user_id IN tasker.assignments.user_id%TYPE, c_assignments OUT r_c_assignments);
    PROCEDURE insert_assignment(
        i_task_id IN tasker.assignments.task_id%TYPE,
        i_user_id IN tasker.assignments.user_id%TYPE,
        i_status_id IN tasker.assignments.task_id%TYPE,
        c_inserted_assignment OUT r_c_assignments
    );

    PROCEDURE update_assignment(
        i_assignment_id IN tasker.assignments.assignment_id%TYPE,
        i_task_id IN tasker.assignments.task_id%TYPE,
        i_user_id IN tasker.assignments.user_id%TYPE,
        i_status_id IN tasker.assignments.task_id%TYPE,
        c_updated_assignment OUT r_c_assignments);

    PROCEDURE link_to_vector(
        i_assignment_id IN tasker.assignments.assignment_id%TYPE,
        i_vector_id IN tasker.assignments.vector_id%TYPE);

    PROCEDURE get_assignment_by_vector_id(i_vector_id IN tasker.assignments.vector_id%TYPE, c_assignment OUT r_c_assignments);

END assignments_core;
/

create PACKAGE BODY         assignments_core AS

    PROCEDURE get_assignments(c_assignments OUT r_c_assignments)
        IS
        BEGIN
            OPEN c_assignments FOR
            SELECT
                a.assignment_id AS "AssignmentId",
                a.task_id AS "Task",
                a.user_id AS "User",
                a.updated_at AS UpdatedAt,
                a.vector_id AS "VectorId",
                a.status
            FROM
                assignments a;
        END;

    PROCEDURE get_assignment_by_id(i_assignment_id IN tasker.assignments.assignment_id%TYPE,
                                   c_assignment OUT r_c_assignments)
        IS
        BEGIN
            OPEN c_assignment FOR
            SELECT
                a.assignment_id AS "AssignmentId",
                a.task_id AS "Task",
                a.user_id AS "User",
                a.updated_at AS UpdatedAt,
                a.vector_id AS "VectorId",
                a.status
            FROM
                assignments a
            WHERE
                a.assignment_id = i_assignment_id
            FETCH FIRST ROW ONLY;
        END;

    PROCEDURE get_assignments_by_task_id(i_task_id IN tasker.assignments.task_id%TYPE,
                                         c_assignments OUT r_c_assignments)
        IS
        BEGIN
            OPEN c_assignments FOR
            SELECT
                a.assignment_id AS "AssignmentId",
                a.task_id AS "Task",
                a.user_id AS "User",
                a.updated_at AS UpdatedAt,
                a.vector_id AS "VectorId",
                a.status
            FROM
                assignments a
            WHERE
                a.task_id = i_task_id;
        END;

    PROCEDURE get_assignments_by_user_id(i_user_id IN tasker.assignments.user_id%TYPE,
                                         c_assignments OUT r_c_assignments)
        IS
        BEGIN
            OPEN c_assignments FOR
            SELECT
                a.assignment_id AS "AssignmentId",
                a.task_id AS "Task",
                a.user_id AS "User",
                a.updated_at AS UpdatedAt,
                a.vector_id AS "VectorId",
                a.status
            FROM
                assignments a
            WHERE
                a.user_id = i_user_id;
        END;

    PROCEDURE insert_assignment(
        i_task_id IN tasker.assignments.task_id%TYPE,
        i_user_id IN tasker.assignments.user_id%TYPE,
        i_status_id IN tasker.assignments.task_id%TYPE,
        c_inserted_assignment OUT r_c_assignments)
        IS
            v_new_assignment_id tasker.assignments.assignment_id%TYPE;
        BEGIN
            INSERT INTO assignments(
                task_id,
                user_id,
                created_at,
                updated_at,
                status
            ) VALUES (
                i_task_id,
                i_user_id,
                SYSDATE,
                SYSDATE,
                i_status_id
            )
            RETURNING assignment_id INTO v_new_assignment_id;

            get_assignment_by_id(v_new_assignment_id, c_inserted_assignment);
        END;

    PROCEDURE update_assignment(
        i_assignment_id IN tasker.assignments.assignment_id%TYPE,
        i_task_id IN tasker.assignments.task_id%TYPE,
        i_user_id IN tasker.assignments.user_id%TYPE,
        i_status_id IN tasker.assignments.task_id%TYPE,
        c_updated_assignment OUT r_c_assignments)
        IS
        BEGIN
            
            UPDATE tasker.assignments
            SET
                task_id = i_task_id,
                user_id = i_user_id,
                updated_at = sysdate,
                status = i_status_id
            WHERE
                assignment_id = i_assignment_id;

            get_assignment_by_id(i_assignment_id, c_updated_assignment);
        END;

    PROCEDURE link_to_vector(
        i_assignment_id IN tasker.assignments.assignment_id%TYPE,
        i_vector_id IN tasker.assignments.vector_id%TYPE)
        IS
        BEGIN
            UPDATE tasker.assignments
            SET vector_id = i_vector_id
            WHERE assignment_id = i_assignment_id;
        END;

    PROCEDURE get_assignment_by_vector_id(i_vector_id IN tasker.assignments.vector_id%TYPE, c_assignment OUT r_c_assignments)
        IS
        BEGIN
            OPEN c_assignment FOR
            SELECT
                a.assignment_id AS "AssignmentId",
                a.task_id AS "Task",
                a.user_id AS "User",
                a.updated_at AS UpdatedAt,
                a.vector_id AS "VectorId",
                a.status
            FROM
                assignments a
            WHERE
                trim(a.vector_id) like trim(i_vector_id);
        END;


END assignments_core;
/

create PACKAGE            users_core AS
    TYPE r_c_users IS REF CURSOR;

    PROCEDURE get_users(c_users OUT r_c_users);
    PROCEDURE get_user_by_id(i_user_id IN tasker.users.user_id%TYPE, c_user OUT r_c_users);

END users_core;
/

create PACKAGE BODY            users_core AS

    PROCEDURE get_users(c_users OUT r_c_users)
        IS
        BEGIN
            OPEN c_users FOR
            SELECT
                u.user_id AS "UserId",
                u.username,
                u.email,
                u.password_hash AS "PassowrdHash",
                u.salt,
                u.role,
                u.created_at AS "CreatedAt",
                u.updated_at AS "UpdatedAt",
                u.status
            FROM
                users u;

        END;

    PROCEDURE get_user_by_id(i_user_id IN tasker.users.user_id%TYPE, c_user OUT r_c_users)
        IS
        BEGIN
            OPEN c_user FOR
            SELECT
                u.user_id AS "UserId",
                u.username,
                u.email,
                u.password_hash AS "PassowrdHash",
                u.salt,
                u.role,
                u.created_at AS "CreatedAt",
                u.updated_at AS "UpdatedAt",
                u.status
            FROM
                users u
            WHERE
                u.user_id = i_user_id
            FETCH FIRST ROW ONLY;
        END;

END users_core;
/

create PACKAGE         statuses_core AS
    TYPE r_c_statuses IS REF CURSOR;

    PROCEDURE get_statuses(c_statuses OUT r_c_statuses);
    PROCEDURE get_status_by_id(i_status_id IN tasker.status.status_id%TYPE, c_status OUT r_c_statuses);

END statuses_core;
/

create PACKAGE BODY         statuses_core AS

    PROCEDURE get_statuses(c_statuses OUT r_c_statuses)
        IS
        BEGIN
            OPEN c_statuses FOR
            SELECT
                s.status_id AS "StatusId",
                s.name,
                s.description
            FROM
                status s;
        END;

    PROCEDURE get_status_by_id(i_status_id IN tasker.status.status_id%TYPE, c_status OUT r_c_statuses)
        IS
        BEGIN
            OPEN c_status FOR
            SELECT
                s.status_id AS "StatusId",
                s.name,
                s.description
            FROM
                status s
            WHERE
                s.status_id = i_status_id
            FETCH FIRST ROW ONLY;
        END;

END statuses_core;
/

create PACKAGE            task_types_core AS
    TYPE r_c_task_types IS REF CURSOR;
    PROCEDURE get_task_types(c_task_types OUT r_c_task_types);
    PROCEDURE get_task_types_by_id(i_task_type_id IN tasker.task_types.task_type_id%TYPE, c_task_type OUT r_c_task_types);

END task_types_core;
/

create PACKAGE BODY            task_types_core AS

    PROCEDURE get_task_types(c_task_types OUT r_c_task_types)
        IS
        BEGIN
            OPEN c_task_types FOR
            SELECT
                t.task_type_id AS "TaskTypeId",
                t.name,
                t.description
            FROM
                task_types t;
        END;

    PROCEDURE get_task_types_by_id(i_task_type_id IN tasker.task_types.task_type_id%TYPE, c_task_type OUT r_c_task_types)
        IS
        BEGIN
            OPEN c_task_type FOR
            SELECT
                t.task_type_id AS "TaskTypeId",
                t.name,
                t.description
            FROM
                task_types t
            WHERE
                t.task_type_id = i_task_type_id
            FETCH FIRST ROW ONLY;
        END;

END task_types_core;
/

create PACKAGE            queries_core AS
    TYPE r_c_queries IS REF CURSOR;

    PROCEDURE get_query_by_id(i_query_id tasker.queries.query_id%TYPE, c_query OUT r_c_queries);
    PROCEDURE insert_query(
        i_response_id IN tasker.queries.response_id%TYPE,
        i_vector_id IN tasker.comments.content%TYPE,
        c_inserted_query OUT r_c_queries);

    PROCEDURE insert_query_response_rating(
        i_query_id IN tasker.query_response_ratings.query_id%TYPE,
        i_response_id IN tasker.query_response_ratings.response_id%TYPE,
        i_rating IN tasker.query_response_ratings.rating%TYPE,
        o_query_id OUT tasker.query_response_ratings.query_id%TYPE);

    PROCEDURE link_query_to_vector(
        i_query_id IN tasker.queries.query_id%TYPE,
        i_vector_id IN tasker.queries.vector_id%TYPE);

    PROCEDURE update_rating(
        i_rating_id IN tasker.query_response_ratings.rating_id%TYPE,
        i_rating IN tasker.query_response_ratings.rating%TYPE);

END queries_core;
/

create PACKAGE  BODY queries_core AS

    PROCEDURE get_query_by_id(i_query_id tasker.queries.query_id%TYPE, c_query OUT r_c_queries)
        IS
        BEGIN
            OPEN c_query FOR
            SELECT
                QUERY_ID as "QueryId",
                RESPONSE_ID AS "ResponseId",
                VECTOR_ID AS "VectorId"
            FROM
                tasker.queries
            WHERE
                query_id = i_query_id
            FETCH FIRST ROW ONLY;
        END;
    PROCEDURE insert_query(
        i_response_id IN tasker.queries.response_id%TYPE,
        i_vector_id IN tasker.comments.content%TYPE,
        c_inserted_query OUT r_c_queries)
        IS
        v_new_query_id tasker.queries.query_id%TYPE;
        BEGIN
            INSERT INTO QUERIES (
                RESPONSE_ID,
                VECTOR_ID
            ) VALUES (
                i_response_id,
                i_vector_id)
            RETURNING query_id INTO v_new_query_id;

            get_query_by_id(v_new_query_id, c_inserted_query);
        END;


    PROCEDURE insert_query_response_rating(
        i_query_id IN tasker.query_response_ratings.query_id%TYPE,
        i_response_id IN tasker.query_response_ratings.response_id%TYPE,
        i_rating IN tasker.query_response_ratings.rating%TYPE,
        o_query_id OUT tasker.query_response_ratings.query_id%TYPE)
        IS
        BEGIN
            INSERT INTO QUERY_RESPONSE_RATINGS(
                query_id,
                response_id,
                rating
            ) VALUES (
                i_query_id,
                i_response_id,
                i_rating)
            RETURNING query_id INTO o_query_id;
        END;


    PROCEDURE link_query_to_vector(
        i_query_id IN tasker.queries.query_id%TYPE,
        i_vector_id IN tasker.queries.vector_id%TYPE)
        IS
        BEGIN
            UPDATE tasker.queries
            SET vector_id = i_vector_id
            WHERE query_id = i_query_id;
        END;

    PROCEDURE update_rating(
        i_rating_id IN tasker.query_response_ratings.rating_id%TYPE,
        i_rating IN tasker.query_response_ratings.rating%TYPE)
        IS
        BEGIN
            UPDATE tasker.query_response_ratings
            SET rating = i_rating, is_processed = 'P'
            WHERE rating_id = i_rating_id;
        END;

END queries_core;
/

create PACKAGE            responses_core AS
    TYPE r_c_responses IS REF CURSOR;

    PROCEDURE get_response_by_id(i_response_id tasker.responses.response_id%TYPE, c_response OUT r_c_responses);
    PROCEDURE insert_response(
        i_comment_id IN tasker.responses.comment_id%TYPE,
        i_input_token_count IN tasker.responses.input_token_count%TYPE,
        i_output_token_count IN tasker.responses.output_token_count%TYPE,
        i_total_token_count IN tasker.responses.total_token_count%TYPE,
        c_inserted_response OUT r_c_responses);

    PROCEDURE insert_response_retrieval_rating(
        i_response_id IN tasker.response_retrieval_ratings.response_id%TYPE,
        i_task_id IN tasker.response_retrieval_ratings.task_id%TYPE,
        i_rating IN tasker.response_retrieval_ratings.rating%TYPE,
        o_response_id OUT tasker.response_retrieval_ratings.response_id%TYPE);

    PROCEDURE link_response_to_comment(
        i_response_id tasker.responses.response_id%TYPE,
        i_comment_id IN tasker.responses.comment_id%TYPE);

    PROCEDURE update_rating(
        i_rating_id IN tasker.response_retrieval_ratings.rating_id%TYPE,
        i_rating IN tasker.response_retrieval_ratings.rating%TYPE);
        
END responses_core;
/

create PACKAGE BODY responses_core AS

    PROCEDURE get_response_by_id(i_response_id tasker.responses.response_id%TYPE, c_response OUT r_c_responses)
        IS
        BEGIN
            OPEN c_response FOR
            SELECT
                RESPONSE_ID AS "ResponseId",
                COMMENT_ID AS "CommentId",
                INPUT_TOKEN_COUNT AS "InputTokenCount",
                OUTPUT_TOKEN_COUNT AS "OutputTokenCount",
                TOTAL_TOKEN_COUNT AS "TotalTokenCount"
            FROM
                tasker.responses
            WHERE
                response_id = i_response_id
            FETCH FIRST ROW ONLY;
        END;
    PROCEDURE insert_response(
        i_comment_id IN tasker.responses.comment_id%TYPE,
        i_input_token_count IN tasker.responses.input_token_count%TYPE,
        i_output_token_count IN tasker.responses.output_token_count%TYPE,
        i_total_token_count IN tasker.responses.total_token_count%TYPE,
        c_inserted_response OUT r_c_responses)
        IS
            v_new_response_id tasker.responses.response_id%TYPE;
        BEGIN
            INSERT INTO tasker.responses (
                comment_id,
                input_token_count,
                output_token_count,
                total_token_count
            ) VALUES(
                i_comment_id,
                i_input_token_count,
                i_output_token_count,
                i_total_token_count)
            RETURNING response_id into v_new_response_id;

            get_response_by_id(v_new_response_id, c_inserted_response);
        END;

    PROCEDURE insert_response_retrieval_rating(
        i_response_id IN tasker.response_retrieval_ratings.response_id%TYPE,
        i_task_id IN tasker.response_retrieval_ratings.task_id%TYPE,
        i_rating IN tasker.response_retrieval_ratings.rating%TYPE,
        o_response_id OUT tasker.response_retrieval_ratings.response_id%TYPE)
        IS
        BEGIN
            INSERT INTO tasker.response_Retrieval_ratings (
                RESPONSE_ID,
                TASK_ID,
                RATING
            ) VALUES (
            i_response_id,
            i_task_id,
            i_rating)
            RETURNING response_id INTO o_response_id;
        END;

    PROCEDURE link_response_to_comment(
        i_response_id tasker.responses.response_id%TYPE,
        i_comment_id IN tasker.responses.comment_id%TYPE)
        IS
        BEGIN
            UPDATE tasker.responses
            SET comment_id = i_comment_id
            WHERE response_id = i_response_id;
        END;

    PROCEDURE update_rating(
        i_rating_id IN tasker.response_retrieval_ratings.rating_id%TYPE,
        i_rating IN tasker.response_retrieval_ratings.rating%TYPE)
        IS
        BEGIN
            UPDATE tasker.response_retrieval_ratings
            SET rating = i_rating, is_processed = 'P'
            WHERE rating_id = i_rating_id;
        END;
        
END responses_core;
/

